@model EasyCodeGenerator.TableModel
@@CodeFileNameFormat {0}Where_auto
@{
    //CodeFileNameFormat 文件名字指令的参数会以 ( TableName, TemplateName)的顺序传入,CodeFileNameFormat 命令以单行的方式进行设置,可以不设置CodeFileNameFormat指令

    string className = Model.Name + "Where";
    string baseName = Model.Name;
}

//------------------------------------------------------------------------------
// <autogenerated>
    //     This code was generated by EasyCodeGenerator
    //
    //     Time:    @DateTime.Now.ToString()
    //
    //     这个文件是自动生成的文件,不要在这个文件里面写代码,会被覆盖
    //</autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using Hqew.DMSFrame.Entity.ExpressionClips;
using Hqbuy.Utility;

@foreach (var item in Model.RelatedNamespace)
{
<text>using @item;
</text>
}

namespace  @Model.Namespace
{
    /// <summary>
    /// 条件查询
    ///</summary>
    public partial class @className  : BaseSerarch
    { 
        #region 公开属性
      
        @foreach (var item in Model.Columns)
        {
            <text>
                /// <summary>
                /// @item.Describe
                ///</summary>
                public @(item.CsharpNoQuestionMark+(item.IsValueType?"?":"")) @item.Name
                { get; set; }
</text>
        }




        #endregion
        #region 公开方法


        #endregion 
 
        #region 私有属性

        /// <summary>
        /// 用于分部类,扩展where方法
        /// </summary>
        private event Func<WhereClip<@baseName>> GetWhereFunc;

        #endregion
        #region 私有方法
    
        /// <summary>
        /// 获取where条件
        /// </summary>
        /// <returns></returns>
        public WhereClip<@baseName> GetWhere()
        {
            WhereClip<@baseName> w = null;

            if (GetWhereFunc != null)
            {
                w = GetWhereFunc?.Invoke();
            }

            if (w == null)
            {
                w = new WhereClip<@baseName>();
            }
    
            @foreach (var item in Model.Columns)
            {
                <text>
            if (this.@item.Name != null)
            {
                w.And(p => p.@item.Name == this.@item.Name);
            }
</text>
            }

            /// 非空条件
            foreach (var item in this.NotNullAttribute)
            {
                switch (item)
                {
    
            @foreach (var item in Model.Columns)
            {
                <text>
                    case "@item.Name":
                        w.And(p => p.@(item.Name).IsNotNull());
                        break;
</text>
            }
                   
                    default:
                        break;
                }
            }

            /// 非空条件
            foreach (var item in this.NullAttribute)
            {
                switch (item)
                {
    
            @foreach (var item in Model.Columns)
            {
                <text>
                    case "@item.Name":
                        w.And(p => p.@(item.Name).IsNull());
                        break;
</text>
            }
                   
                    default:
                        break;
                }
            }



            return w;
        }

        #endregion 
    }
}
